* Purpose

The purpose of this document is to establish a specification for an
implementation-independent, yet customizable code walker for Common
Lisp.

* Use cases

To facilitate the establishment of a specification for a code walker,
it is interesting to look at a few use cases.

** Simple use cases.

A recent blog post by Christophe Rhodes discussed how a code walker
could be used for some simple cases from the book "Let over Lambda".
The main point of these cases were to distinguish between symbols with
particular names in different contexts.  In the simplest case, it was
required to distinguish between such symbols in a context where they
were to be evaluated as variables, and a context where no such
evaluation would take place.

Another relatively simple case would be processing a general version
of a sequence function such as FIND in order to create a special
version in which (say) the :KEY is #'IDENTITY and the :TEST is #'EQ.

** Minimal compilation

A very useful utility for a code walker is "minimal compilation".
This use case is almost the same as the typical "macroexpand-all" use
case.  The only difference has to do with compiler macros.  In the
minimal compilation case, global macros and global function may have
compiler macros associated with them.  In that case, the compiler
macro must be tried first.  Unless the compiler macro declines, the
replacement form computed by the compiler macro function should be
considered in place of the original form.

A minimal compiler might be "intrinsic" (native, i.e., running in the
same implementation as the one for which the result is intended) or
"extrinsic" (i.e, running in a different implementation).  In the
extrinsic case, macros introduced by MACROLET should be handled by
computing a lambda expression (much like the CLtL2 function
PARSE-MACRO), the lambda expression should then be minimally compiled
in the target environment, and finally the resulting lambda expression
should be turned into a function IN THE HOST ENVIRONMENT and
associated with the macro name in the environment in which the body of
the MACROLET is minimally compiled.

** Generating an AST from a form.

Generating an AST might be the first phase of a compiler or an
interpreter.

In the intrinsic case, walking a form to generate an AST is similar to
minimally compiling the form.  However, in the extrinsic case, things
get complicated, again because of MACROLET.  The reason is that there
is no point in generating an AST for the macro function then.
Instead, the macro function should be computed in the same way as in
the case of minimal compilation.  In other words, the lambda
expression should first be computed from the macro definition, then
that lambda expression should be MINIMALLY COMPILED in the target
environment, and finally turned into a function in the host
environment.  We now have a case where we need to SWITCH FROM ONE TYPE
OF PROCESSING TO A DIFFERENT TYPE OF PROCESSING during code
walking.  In this particular case, we switched from generating AST to
minimal compilation.

** Direct interpreter

A code walker should be possible to configure to become a direct
interpreter, i.e., an interpreter that directly evaluates forms in a
particular environment.

It is even possible to imagine an extrinsic interpreter that uses the
representation of data from the host system, but that uses a
first-class global environment to simulate the meaning of forms in the
target system.  The global environment would then contain two types of
functions: primitive functions that are directly executed by the host
system, and target functions that are executed by interpreting some
body of code in the lexical target environment associated with the
function.

* Managing Environments

Cleavir already has an implementation-independent customizable
technique for managing environments.  We believe this technique is
adequate for all the use cases listed above.

Currently, default local environments for compile-time processing are
provided.  For an interpreter, a different set of local environments
could be provided that also contain run-time information such as
variable values.

* Customization

** Implementation-specific handling of standard special forms

The standard allows for an implementation to implement a standard
special operator as a macro.  But the code walker must stop when an
operator defined as a special operator in the standard is encountered,
whether it happens to be implemented as a macro or not.

** Implementation-specific special forms.

Implementation typically introduce special operators used in the
expansion of standard macros that can not be expressed using other
standard operators exclusively, or that are not expressed that way for
reasons of performance.

It must be possible to augment the code walker with
implementation-specific special forms.  Configuration will then
involve what sub-forms should be evaluated and which ones should not,
but this is not enough.  The code walker must process every sub-form
in SOME way, so that a code walker can be created that collects
information or alter these sub-forms.

In particular, it must be possible to configure how a NEW ENVIRONMENT
in which sub-forms are to be processed as a function of the
environment of the entire form and other information present in the
special form.

As an example, imagine that FLET and LABELS were not part of the
standard, and that some implementation wanted to add them.  It must
then be possible to configure the code walker to compute the
environment in which local function bodies are processed.  In the case
of FLET, it is the environment of the FLET form, and in the case of
LABELS, it is that environment augmented with the local function
definitions.

* Reasonable defaults

The example of FLET and LABELS above shows that it must be possible to
configure the code walker to compute environments for sub-forms.  On
the other hand, always requiring such configuration is not helpful.
Doing that would amount to requiring the user to rewrite the essential
part of the code walker for each use case.  For that reason, it is
essential that the code walker provide reasonable defaults for all
standard situations (standard special forms, function calls, etc).

Similarly, the example of AST generation shows that it must be
possible to configure what type of processing should be done in
sub-forms as a function of the processing of the entire form.  Again,
it would be unreasonable to require the user to provide this explicit
information for all types of forms.  In this case, the default should
be to process sub-forms the same way as the entire form.

* Tentative specification

** Generic function WALK-FORM

WALK-FORM form walker environment

The default primary method checks whether FORM is a self-evaluating
object, a symbol, or a CONS.

  - If it is a self-evaluating object, the generic function
    WALK-SELF-EVALUATING is called with the object, the walker, and
    the environment.

  - If it is a symbol, then the meaning of the symbol as a variable is
    looked up ENVIRONMENT by calling VARIABLE-INFO to produce an INFO
    INSTANCE, and the generic function WALK-INFO is called with the
    info instance, the form, the walker and the environment.

    If VARIABLE-INFO returns NIL, meaning the symbol has no definition
    in the variable namespace in the current environment, then the
    condition NO-VARIABLE-INFO is signaled and two restarts are
    provided:

    . SUBSTITUTE, allowing the substitution of a different symbol.
      The invocation of the walker is tried again with the new
      symbol.

    . CONSIDER-SPECIAL, in which case the walker creates a
      SPECIAL-VARIABLE-INFO instance and calls WALK-INFO with that
      info instance, the new symbol, the walker and the environment.

  - If it is a CONS, then the CAR of the cons is examined.

    . If the CAR is a symbol, then the meaning of the symbol as a
      function is looked up in the environment by calling
      FUNCTION-INFO to produce an INFO INSTANCE, and the generic
      function WALK-INFO is called with the info instance, the form,
      the walker and the environment.

      If FUNCTION-INFO returns NIL, meaning the symbol has no
      definition in the function namespace in the current environment,
      then the condition NO-FUNCTION-INFO is signaled and a restart
      named SUBSTITUTE is provided, allowing the substitution of a
      different symbol.

    . If the CAR is a CONS, and the CAR of that CONS is the symbol
      LAMBDA, then the generic function WALK-LAMBDA-CALL is called
      with the entire form, the walker and the environment.

** Generic function WALK-SELF-EVALUATING

WALK-SELF-EVALUATING object walker environment.

There are no default methods provided.

** Generic function WALK-INFO

WALK-INFO info form walker environment

The default method specialized to (SPECIAL-OPERATOR-INFO T T) calls
the generic function WALK-SPECIAL-FORM with the info instance, the
name of the special operator, the form, the walker and the
environment.

** Generic function WALK-SPECIAL-FORM

WALK-SPECIAL-FORM info name form walker environment.

Methods on this generic function typically has an EQL specializer for
the NAME parameter.
