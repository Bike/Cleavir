(cl:in-package #:cleavir-cst-to-ast)

;;; VAR-CST and SUPPLIED-P-CST are CSTs representing a parameter
;;; variable and its associated SUPPLIED-P variable. If no associated
;;; SUPPLIED-P variable is present in the lambda list then
;;; SUPPLIED-P-CST is NIL.  INIT-AST is the AST that computes the
;;; value to be assigned to the variable represented by VAR-CST if no
;;; argument was supplied for it.  ENV is an environment that already
;;; contains the variables corresponding to VAR-CST and SUPPLIED-P-CST
;;; (if it is not NIL).
;;;
;;; This function returns two values.  The first value is an AST that
;;; represents both the processing of this parameter AND the
;;; computation that follows.  We can not return an AST only for this
;;; computation, because if either one of the variables represented by
;;; VAR-CST or SUPPLIED-P-CST is special, then NEXT-AST must be in the
;;; body of a BIND-AST generated by this function.  The second return
;;; value is a list of two LEXICAL-ASTs.  The first lexical AST
;;; corresponds to VAR-CST and the second to SUPPLIED-P-CST.  The
;;; implementation-specific argument-parsing code is responsible for
;;; assigning to those LEXICAL-ASTs according to what arguments were
;;; given to the function.
(defun process-init-parameter
    (var-cst var-ast supplied-p-cst supplied-p-ast init-ast env next-thunk system)
  (let ((origin (cst:source var-cst)))
    (set-or-bind-variable
     var-cst (make-initialization-ast var-ast supplied-p-ast init-ast
                                      origin env system)
     (if (null supplied-p-cst)
         next-thunk
         (lambda ()
           (set-or-bind-variable
            supplied-p-cst supplied-p-ast
            next-thunk env system)))
     env system)))
